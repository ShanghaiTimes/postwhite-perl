49d48
< # DONT FORGET to make sure you uncomment the sorted file output location, and the ./perlsort location
64,65c63
< 
< invalidip4=keep
---
> invalidip4=remove
70d67
< 
72d68
< 
146c142
<     printf $(((((((a << 8) | b) << 8) | c) << 8) | d))
---
>     echo $(((((((a << 8) | b) << 8) | c) << 8) | d))
156c152
<     printf $ip
---
>     echo $ip
160,162c156,158
<     local ia netmask;
<     { IFS="/" read ia netmask; } <<< $1
<     local addr=$(ip2int $ia);
---
>     local ip netmask;
>     { IFS="/" read ip netmask; } <<< $1
>     local addr=$(ip2int $ip);
164c160
<     printf $(int2ip $((addr & mask)))/$netmask
---
>     echo $(int2ip $((addr & mask)))/$netmask
168,182c164,178
<         # split by ":"
<         local array=(${ip/:/ });
<         if [ "x${array[0]}" = "xip4" ] ; then
<                 # check if is a CIDR
<                 if [[ ${array[1]} == *"/"32 ]] ; then
<                         IP=${array[1]}
<                 elif [[ ${array[1]} == *"/"* ]] ; then
<                         IP=$(network ${array[1]});
<                 else
<                         IP=${array[1]}
<                 fi
<         else
<                 IP=${array[1]}
<         fi
<         printf "$IP"
---
> 	# split by ":"
> 	local array=(${ip/:/ });
> 	if [ "x${array[0]}" = "xip4" ] ; then
> 		# check if is a CIDR
> 		if [[ ${array[1]} == *"/"32 ]] ; then
> 			IP=${array[1]}
> 		elif [[ ${array[1]} == *"/"* ]] ; then
> 			IP=$(network ${array[1]});
> 		else
> 			IP=${array[1]}
> 		fi
> 	else
> 		IP=${array[1]}
> 	fi
> 	echo "$IP"
341,345c337,342
<         printf "\nSimplifying IP addresses already included in CIDR ranges. These calculations\n"
<         printf "can take a LONG time if you have many mailers selected. Please be patient..."
<         cat "${tmp1}" | "${spftoolspath}"/simplify.sh > "${tmp2}" &
<         show_dots $!
<         printf "\nIP address simplification complete.\n"
---
> 	echo -e ""
> 	echo -e "Simplifying IP addresses already included in CIDR ranges. These calculations\n"
> 	echo -n "can take a LONG time if you have many mailers selected. Please be patient..."
> 	cat "${tmp1}" | "${spftoolspath}"/simplify.sh > "${tmp2}" &
> 	show_dots $!
> 	echo -e "\nIP address simplification complete."
347c344
<         cat "${tmp1}" > "${tmp2}"
---
> 	cat "${tmp1}" > "${tmp2}"
354c351
< 	printf -n "Fixing invalid IPv4 CIDRs..."
---
> 	echo -n "Fixing invalid IPv4 CIDRs..."
358c355
< 			printf "$ip\tpermit\n"
---
> 			echo -ne "$ip\tpermit\n"
362a360
> 
365,376c363,375
<         printf "\nRemoving invalid IPv4 CIDRs..."
<         for ip in $(cat "${tmp2}") ; do
<                 iptype=$( printf "$ip" | cut -d\: -f1 )
<                 origip=$( printf "$ip" | cut -d\: -f2 )
<                 ip=$(normalize_ipv4 "$ip");
<                 if [ "$origip" == "$ip" ] ; then
<                         printf "$ip\tpermit\n"
<                 elif [ "$iptype" == "ip6" ] ; then
<                         printf "$ip\tpermit\n"
<                 fi
<         done >> "${tmp3}" &
<         show_dots $!
---
> 	echo -n "Removing invalid IPv4 CIDRs..."
> 	for ip in $(cat "${tmp2}") ; do
> 		iptype=$( echo "$ip" | cut -d\: -f1 )
> 		origip=$( echo "$ip" | cut -d\: -f2 )
> 		ip=$(normalize_ipv4 "$ip");
> 		if [ "$origip" == "$ip" ] ; then
> 			echo -ne "$ip\tpermit\n"
> 		elif [ "$iptype" == "ip6" ] ; then
> 			echo -ne "$ip\tpermit\n"
> 		fi
> 	#done >> "${tmp3}" &  # This & doesn't work in OSX
> 	done >> "${tmp3}" 
> 	show_dots $!
380,381c379,380
<         printf "\nKeeping invalid IPv4 CIDRs...\n"
<         printf "%s\n" | grep "^ip" "${tmp2}" | cut -c5- | sed s/$/'     permit'/ > "${tmp3}"
---
> 	echo -e "\nKeeping invalid IPv4 CIDRs..."
> 	printf "%s\n" | grep "^ip" "${tmp2}" | cut -c5- | sed s/$/'	permit'/ > "${tmp3}"
394a394
> #numrules=$(cat "${tmp5}" | wc -l)
399,400c399,400
< #$perlsortpath/perlsort.pl
< ./perlsort.pl
---
> $perlsortpath/perlsort.pl
> 
438c438
< exit
---
> exit
\ No newline at end of file
