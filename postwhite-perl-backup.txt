#! /bin/bash
# 
# Postwhite - Automatic Postcreen Whitelist Generator
#
# By Steve Jenkins (http://stevejenkins.com/)
        version="1.23"
        lastupdated="24 Dec 2015"
#
# Usage: place entire postwhite directory in /usr/local/bin then
# run ./postwhite
#
# Requires SPF-Tools (https://github.com/jsarenik/spf-tools)
# Please update your copy of spf-tools whenever you update Postwhite
# despf.sh required >= 29 Nov 2015
# simplify.sh required >= 07 Jul 2015

# Thanks to Mike Miller (mmiller@mgm51.com) for gwhitelist.sh script
# Thanks to Jan Sarenik for SPF-Tools
# Thanks to Jose Borges Ferreira for IPv4 normalization help

	version="1.25"
	lastupdated="29 Dec 2015" 
# Location: https://github.com/ShanghaiTimes/postwhite-perl
# By Robert Chalmers (http://chalmers.com.au)

# This version has a perlscript associated with it. perlsort.pl.
# It produces this final output at the moment.
# Writing      576 whitelist rules to postscreen_spf_whitelist.cidr...


# it is NOT ready for production platforms yet. 
# DO NOT USE LIVE - Until you've checked everything with the Dodgey Bros.
# 
# Test Usage: unpack into a test directory and run ./postwhite-perl. Untill you uncomment
# some lines at the end of the script - check it out - nothing will be put into the postfix directory
#
# General Usage: place entire postwhite-perl directory in /usr/local/bin then 
# run ./postwhite
#
# Requires spf-tools (https://github.com/jsarenik/spf-tools)
# Please update your copy of spf-tools whenever you update Postwhite

# Thanks to Steve Jenkins (http://stevejenkins.com/) for the original postwhite script used here.
# Thanks to Mike Miller (mmiller@mgm51.com) for gwhitelist.sh script
# Thanks to Jan Sarenik for SPF-Tools
# Thanks to Jose Borges Ferreira for IPv4 normalization help

# USER-DEFINABLE OPTIONS

# spf-tools location (REQUIRED)
spftoolspath=/usr/local/bin/spf-tools


# use Perl sort in favour of coretools sort yes/no 
useperl=yes

# where I put the perlsort.pl routine. Move it from the downloaded source directory to /usr/local/bin or a directory of your choice, but make sure you update this.
perlsortpath=/usr/local/bin/perlsort

# Do this to invalid IPv4 addresses and CIDRs (remove / fix / keep)
# WARNING: Setting this option to remove can dramatically increase the time Postwhite takes to
# run if you have many mailers selected. Try it once, then come back and turn it off. :)
invalidip4=remove

# Simplify (remove) IP addresses from the whitelist that are already covered by CIDRs
# WARNING: Enabling this option can dramatically increase the time Postwhite takes to
# run if you have many mailers selected. Try it once, then come back and turn it off. :)
simplify=no
# Both defaults as shown here above, work ok with the list of mailers included. Just be aware though that if you change them, don't do so on a live systen

# Paths
postfixpath=/usr/local/etc/postfix
postfixbinarypath=/usr/local/sbin
whitelist=postscreen_spf_whitelist.cidr


# Reload Postfix Automatically when done? A good idea is yes. Leave no when testing...
reloadpostfix=no

# Choose "yes" or "no" to select from the following senders:

# Webmail Providers
aol=yes
google=yes
gmx=yes
inbox=yes
mac=yes
mail=yes
microsoft=yes
zoho=yes

#Social Networks
facebook=yes
instagram=yes
linkedin=yes
pinterest=yes
reddit=yes
tumblr=yes
twitter=yes

# Ecommerce
amazon=no
craigslist=yes
ebay=yes
paypal=yes

# Bulk Senders
constantcontact=yes
exacttarget=yes
fishbowl=yes
icontact=yes
mailchimp=yes
mailgun=yes
mailjet=yes
sendgrid=yes

# Misc
zendesk=yes
github=yes

# NO NEED TO EDIT PAST THIS LINE

# abort on any error
set -e

# Create temporary files
tmpBase=$(basename "$0")
tmp1=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp2=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp3=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp4=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
tmp5=$(mktemp -q /tmp/"${tmpBase}".XXXXXX)
	if [ $? -ne 0 ]; then
		echo "$0: Can't create temp files, exiting..."
		exit 1
	fi

# Create IPv4 normalize function
ip2int() {
    local a b c d
    { IFS=. read a b c d; } <<< $1
    echo $(((((((a << 8) | b) << 8) | c) << 8) | d))
}

int2ip() {
    local ui32=$1; shift
    local ip n
    for n in 1 2 3 4; do
        ip=$((ui32 & 0xff))${ip:+.}$ip
        ui32=$((ui32 >> 8))
    done
    echo $ip
}

network() {
    local ip netmask;
    { IFS="/" read ip netmask; } <<< $1
    local addr=$(ip2int $ip);
    local mask=$((0xffffffff << (32 -$netmask)));
    echo $(int2ip $((addr & mask)))/$netmask
}

function normalize_ipv4() {
	# split by ":"
	local array=(${ip/:/ });
	if [ "x${array[0]}" = "xip4" ] ; then
		# check if is a CIDR
		if [[ ${array[1]} == *"/"32 ]] ; then
			IP=${array[1]}
		elif [[ ${array[1]} == *"/"* ]] ; then
			IP=$(network ${array[1]});
		else
			IP=${array[1]}
		fi
	else
		IP=${array[1]}
	fi
	echo "$IP"
}

# Create host query function
function query_host() {
	"${spftoolspath}"/despf.sh "$1" >> "${tmp1}"
}

# Create progress dots function
function show_dots() {
	while ps |grep $1 &>/dev/null; do
       echo -n "."
       sleep 1
	done
	echo -e " "
}

# Let's DO this!

echo -e "\nStarting Postwhite v$version ($lastupdated)\n"

# Query selected mailers
echo -e "Recursively querying SPF records of selected mailers...\n"

if [ "$google" == "yes" ]; then
	host=google.com
	$(query_host "$host");
fi

if [ "$microsoft" == "yes" ]; then
	host=microsoft.com
	$(query_host "$host");
	host=outlook.com
	$(query_host "$host");
	host=hotmail.com
	$(query_host "$host");
fi

if [ "$aol" == "yes" ]; then
	host=aol.com
	$(query_host "$host");
fi

if [ "$gmx" == "yes" ]; then
		host=gmx.com
	$(query_host "$host");
fi

if [ "$mac" == "yes" ]; then
	host=icloud.com
	$(query_host "$host");
fi

if [ "$mail" == "yes" ]; then
	host=mail.com
	$(query_host "$host");
fi

if [ "$inbox" == "yes" ]; then
	host=inbox.com
	$(query_host "$host");
fi

if [ "$zoho" == "yes" ]; then
	host=zoho.com
	$(query_host "$host");
fi

if [ "$facebook" == "yes" ]; then
	host=facebook.com
	$(query_host "$host");
fi

if [ "$twitter" == "yes" ]; then
	host=twitter.com
	$(query_host "$host");
fi

if [ "$pinterest" == "yes" ]; then
	host=pinterest.com
	$(query_host "$host");
fi

if [ "$instagram" == "yes" ]; then
	host=instagram.com
	$(query_host "$host");
fi

if [ "$tumblr" == "yes" ]; then
	host=tumblr.com
	$(query_host "$host");
fi

if [ "$reddit" == "yes" ]; then
	host=reddit.com
	$(query_host "$host");
fi

if [ "$linkedin" == "yes" ]; then
	host=linkedin.com
	$(query_host "$host");
fi

if [ "$craigslist" == "yes" ]; then
	host=craigslist.org
	$(query_host "$host");
fi

if [ "$amazon" == "yes" ]; then
	host=amazon.com
	$(query_host "$host");
fi

if [ "$ebay" == "yes" ]; then
	host=ebay.com
	$(query_host "$host");
fi

if [ "$paypal" == "yes" ]; then
	host=paypal.com
	$(query_host "$host");
fi

if [ "$sendgrid" == "yes" ]; then
	host=sendgrid.com
	$(query_host "$host");
	host=sendgrid.net
	$(query_host "$host");
fi

if [ "$mailchimp" == "yes" ]; then
	host=mailchimp.com
	$(query_host "$host");
fi

if [ "$exacttarget" == "yes" ]; then
	host=exacttarget.com
	$(query_host "$host");
	host=cust-spf.exacttarget.com
	$(query_host "$host");
fi

if [ "$constantcontact" == "yes" ]; then
	host=constantcontact.com
	$(query_host "$host");
fi

if [ "$icontact" == "yes" ]; then
	host=icontact.com
	$(query_host "$host");
fi

if [ "$zendesk" == "yes" ]; then
	host=zendesk.com
	$(query_host "$host");
fi

# If enabled, simplify (remove) any individual IPs already included in CIDR ranges (disabled by default)
if [ "$simplify" == "yes" ]; then
	echo -e ""
	echo -e "Simplifying IP addresses already included in CIDR ranges. These calculations\n"
	echo -n "can take a LONG time if you have many mailers selected. Please be patient..."
	cat "${tmp1}" | "${spftoolspath}"/simplify.sh > "${tmp2}" &
	show_dots $!
	echo -e "\nIP address simplification complete."
else
	cat "${tmp1}" > "${tmp2}"
fi

# Check for invalid IPv4 CIDRs, then format the whitelist

# If enabled, fix invalid CIDRs
if [ "$invalidip4" == "fix" ] ; then
	echo -n "Fixing invalid IPv4 CIDRs..."
	for ip in $(cat  "${tmp2}") ; do
		ip=$(normalize_ipv4  "$ip");
		if [ -n "$ip" ] ; then
			echo -ne "$ip\tpermit\n"
		fi
	#done >> "${tmp3}" &  # This & doesn't work in OSX
	done >> "${tmp3}" 
	show_dots $!

# If enabled, remove invalid CIDRs
elif [ "$invalidip4" == "remove" ] ; then
	echo -n "Removing invalid IPv4 CIDRs..."
	for ip in $(cat "${tmp2}") ; do
		iptype=$( echo "$ip" | cut -d\: -f1 )
		origip=$( echo "$ip" | cut -d\: -f2 )
		ip=$(normalize_ipv4 "$ip");
		if [ "$origip" == "$ip" ] ; then
			echo -ne "$ip\tpermit\n"
		elif [ "$iptype" == "ip6" ] ; then
			echo -ne "$ip\tpermit\n"
		fi
	#done >> "${tmp3}" &  # This & doesn't work in OSX
	done >> "${tmp3}" 
	show_dots $!

# If enabled, keep invalid CIDRs
elif [ "$invalidip4" == "keep" ] ; then
	echo -e "\nKeeping invalid IPv4 CIDRs..."
	printf "%s\n" | grep "^ip" "${tmp2}" | cut -c5- | sed s/$/'	permit'/ > "${tmp3}"
fi

export TMP3="${tmp3}"		#bash, ksh, zsh
export TMP5="${tmp5}"

# don't use Perl sort
if [ "$useperl" == "no" ] ; then

# Sort, uniq, and count final rules
# Have to do sort and uniq separately, as 'sort -u -t. -k1,1n...' removes valid rules
echo -e "\nSorting whitelist rules...\n"
sort -t. -k1,1n -k2,2n -k3,3n -k4,4n "${tmp3}" > "${tmp4}"
uniq "${tmp4}" >> "${tmp5}"
#numrules=$(cat "${tmp5}" | wc -l)

elif [ "$useperl" != "no" ] ; then

echo -e "\ndoing perlsort.pl...\n"
$perlsortpath/perlsort.pl

fi

#ok - now grab the number of 'rules'
numrules=$(cat "${tmp5}" | wc -l)

#/- These last few lines will need alternatively uncommenting, and commenting. They allow the script to put the cidr file in 
#/- THIS unpacked directory - NOT into the postfix directory as done with the operational script.
#/- If you decide to use this script, then need to make sure that this is modified.
#/- You will of course also need to modify the crontab line to reflect this name.

# Write whitelist to Postfix directory
#echo -e "Writing $numrules whitelist rules to ${postfixpath}/${whitelist}...\n"
echo -e "Writing $numrules whitelist rules to ${whitelist}...\n"

#echo -e "# Generated by Postwhite v$version on $(date)\n# https://github.com/ShanghaiTimes/postwhite-perl/\n# $numrules total rules" > "${postfixpath}"/"${whitelist}"
echo -e "# Generated by Postwhiteperl v$version on $(date)\n# https://github.com/ShanghaiTimes/postwhite-perl/\n# $numrules total rules" > "${whitelist}"

#cat "${tmp5}" >> "${postfixpath}"/"${whitelist}"
echo -e "cat tmp5 to local-shitelist\n"
cat "${tmp5}" >> "${whitelist}"


# Remove temp files
test -e "${tmp1}" && rm "${tmp1}"
test -e "${tmp2}" && rm "${tmp2}"
test -e "${tmp3}" && rm "${tmp3}"
test -e "${tmp4}" && rm "${tmp4}"
test -e "${tmp5}" && rm "${tmp5}"

# Reload Postfix to pick up changes in whitelist
if [ "$reloadpostfix" == "yes" ]; then
echo -e 'Reloading Postfix configuration to refresh whitelist rules...\n'
	${postfixbinarypath}/postfix reload
fi

echo -e '\nDone!'

exit
